const generatedByTreeSelector = "// Generated by tree selector";

var ignores = [];
var invalidPattern = false;
var selectedAll = false;
var itemCount = 0;

// To prevent running multiple jobs at once.
// When new job starts old one cancel itself.
var latestReqId = 0;

self.onmessage = function (msg) {
	//console.log("fancyTreeGlobalDataWorker | start", "data", msg.data)
	const newReqId = Date.now();
	latestReqId = newReqId;

	// Just cancellation message.
	if (!msg.data?.data) {
		//console.log("fancyTreeGlobalDataWorker | cancel requested")
		return;
	}

	ignores = msg.data.ignorePatterns;
	if (ignores[0] !== generatedByTreeSelector) {
		invalidPattern = true;
		ignores = [];
	} else {
		ignores = ignores.slice(1, -1)
	}

	//console.log("fancyTreeGlobalDataWorker | ignores.length", ignores.length)
	const selectAllPattern = ignores.length == 0 || (ignores.length == 1 && ignores[0] == "");
	selectedAll = true;
	itemCount = 0;

	self.postMessage({
		data: formatGlobalTreeNodes(msg.data.data, "", newReqId, !selectAllPattern),
		invalidPattern: invalidPattern,
		selectedAll: selectedAll,
		itemCount: itemCount,
	});
	inProgress = false;
	//console.log("fancyTreeGlobalDataWorker | finished");
}

function formatGlobalTreeNodes(data, parentKey, reqId, parentIgnored = true) {
	if (reqId != latestReqId) {
		//console.log("fancyTreeGlobalDataWorker | cancelled", reqId)
		return null;
	}

	var result = [];
	// console.log("formatGlobalTreeNodes(worker)", "data", data, "parentKey", parentKey, "parentIgnored", parentIgnored)
	data.forEach(function (node) {
		const isFolder = node.type == "FILE_INFO_TYPE_DIRECTORY";
		const key = parentKey + "/" + node.name;
		const found = ignores.find(function (ignoreKey) {
			return key == ignoreKey.slice(1);
		});

		const ignored = parentIgnored && !found;
		if (ignored)
			selectedAll = false;

		result.push({
			children: isFolder && node.children?.length > 0 ? formatGlobalTreeNodes(node.children, key, reqId, ignored) : [],
			key: key,
			title: node.name,
			folder: isFolder,
			selected: !ignored
		});
		if (reqId != latestReqId) {
			//console.log("fancyTreeGlobalDataWorker | cancelled", reqId)
			return null;
		}
	});

	itemCount += result.length;
	return result;
}
