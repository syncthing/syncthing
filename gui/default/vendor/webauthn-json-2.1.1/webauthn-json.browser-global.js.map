{
  "version": 3,
  "sources": ["../../src/webauthn-json/index.ts", "../../src/webauthn-json/base64url.ts", "../../src/webauthn-json/convert.ts", "../../src/webauthn-json/basic/schema.ts", "../../src/webauthn-json/basic/api.ts", "../../src/webauthn-json/basic/supported.ts", "../../src/webauthn-json/browser-global.ts"],
  "sourcesContent": ["export { create, get } from \"./basic/api\";\nexport { supported } from \"./basic/supported\";\nexport { schema } from \"./basic/schema\";\n\nexport type {\n  PublicKeyCredentialDescriptorJSON,\n  PublicKeyCredentialWithAssertionJSON,\n  PublicKeyCredentialWithAttestationJSON,\n  CredentialCreationOptionsJSON,\n  CredentialRequestOptionsJSON,\n} from \"./basic/json\";\n", "export type Base64urlString = string;\n\nexport function base64urlToBuffer(\n  baseurl64String: Base64urlString,\n): ArrayBuffer {\n  // Base64url to Base64\n  const padding = \"==\".slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String =\n    baseurl64String.replace(/-/g, \"+\").replace(/_/g, \"/\") + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): Base64urlString {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = \"\";\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String.replace(/\\+/g, \"-\").replace(\n    /\\//g,\n    \"_\",\n  ).replace(/=/g, \"\");\n  return base64urlString;\n}\n", "// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n\nimport { Schema, SchemaProperty } from \"./schema-format\";\n\n// TODO: Parcel isn't deduplicating these values.\nexport const copyValue = \"copy\";\nexport const convertValue = \"convert\";\n\nexport function convert<From, To>(\n  conversionFn: (v: From) => To,\n  schema: Schema,\n  input: any,\n): any {\n  if (schema === copyValue) {\n    return input;\n  }\n  if (schema === convertValue) {\n    return conversionFn(input);\n  }\n  if (schema instanceof Array) {\n    return input.map((v: any) => convert<From, To>(conversionFn, schema[0], v));\n  }\n  if (schema instanceof Object) {\n    const output: any = {};\n    for (const [key, schemaField] of Object.entries(schema)) {\n      if (schemaField.derive) {\n        const v = schemaField.derive(input);\n        if (v !== undefined) {\n          input[key] = v;\n        }\n      }\n\n      if (!(key in input)) {\n        if (schemaField.required) {\n          throw new Error(`Missing key: ${key}`);\n        }\n        continue;\n      }\n      // Fields can be null (rather than missing or `undefined`), e.g. the\n      // `userHandle` field of the `AuthenticatorAssertionResponse`:\n      // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n      if (input[key] == null) {\n        output[key] = null;\n        continue;\n      }\n      output[key] = convert<From, To>(\n        conversionFn,\n        schemaField.schema,\n        input[key],\n      );\n    }\n    return output;\n  }\n}\n\nexport function derived(\n  schema: Schema,\n  derive: (v: any) => any,\n): SchemaProperty {\n  return {\n    required: true,\n    schema,\n    derive,\n  };\n}\n\nexport function required(schema: Schema): SchemaProperty {\n  return {\n    required: true,\n    schema,\n  };\n}\n\nexport function optional(schema: Schema): SchemaProperty {\n  return {\n    required: false,\n    schema,\n  };\n}\n", "import { Schema } from \"../schema-format\";\nimport {\n  convertValue as convert,\n  copyValue as copy,\n  derived,\n  optional,\n  required,\n} from \"../convert\";\n\n// Shared by `create()` and `get()`.\n\nconst publicKeyCredentialDescriptorSchema: Schema = {\n  type: required(copy),\n  id: required(convert),\n  transports: optional(copy),\n};\n\nconst simplifiedExtensionsSchema: Schema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\nconst simplifiedClientExtensionResultsSchema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\n// `navigator.create()` request\n\nexport const credentialCreationOptions: Schema = {\n  publicKey: required({\n    rp: required(copy),\n    user: required({\n      id: required(convert),\n      name: required(copy),\n      displayName: required(copy),\n    }),\n\n    challenge: required(convert),\n    pubKeyCredParams: required(copy),\n\n    timeout: optional(copy),\n    excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    authenticatorSelection: optional(copy),\n    attestation: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.create()` response\n\nexport const publicKeyCredentialWithAttestation: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  authenticatorAttachment: optional(copy),\n  response: required({\n    clientDataJSON: required(convert),\n    attestationObject: required(convert),\n    transports: derived(\n      copy,\n      (response: any) => response.getTransports?.() || [],\n    ),\n  }),\n  clientExtensionResults: derived(\n    simplifiedClientExtensionResultsSchema,\n    (pkc: PublicKeyCredential) => pkc.getClientExtensionResults(),\n  ),\n};\n\n// `navigator.get()` request\n\nexport const credentialRequestOptions: Schema = {\n  mediation: optional(copy),\n  publicKey: required({\n    challenge: required(convert),\n    timeout: optional(copy),\n    rpId: optional(copy),\n    allowCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    userVerification: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.get()` response\n\nexport const publicKeyCredentialWithAssertion: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  authenticatorAttachment: optional(copy),\n  response: required({\n    clientDataJSON: required(convert),\n    authenticatorData: required(convert),\n    signature: required(convert),\n    userHandle: required(convert),\n  }),\n  clientExtensionResults: derived(\n    simplifiedClientExtensionResultsSchema,\n    (pkc: PublicKeyCredential) => pkc.getClientExtensionResults(),\n  ),\n};\n\nexport const schema: { [s: string]: Schema } = {\n  credentialCreationOptions,\n  publicKeyCredentialWithAttestation,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n};\n", "import { base64urlToBuffer, bufferToBase64url } from \"../base64url\";\nimport { convert } from \"../convert\";\nimport {\n  CredentialCreationOptionsJSON,\n  CredentialRequestOptionsJSON,\n  PublicKeyCredentialWithAssertionJSON,\n  PublicKeyCredentialWithAttestationJSON,\n} from \"./json\";\nimport {\n  credentialCreationOptions,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n  publicKeyCredentialWithAttestation,\n} from \"./schema\";\n\nexport function createRequestFromJSON(\n  requestJSON: CredentialCreationOptionsJSON,\n): CredentialCreationOptions {\n  return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);\n}\n\nexport function createResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAttestationJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAttestation,\n    credential,\n  );\n}\n\nexport async function create(\n  requestJSON: CredentialCreationOptionsJSON,\n): Promise<PublicKeyCredentialWithAttestationJSON> {\n  const credential = (await navigator.credentials.create(\n    createRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return createResponseToJSON(credential);\n}\n\nexport function getRequestFromJSON(\n  requestJSON: CredentialRequestOptionsJSON,\n): CredentialRequestOptions {\n  return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);\n}\n\nexport function getResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAssertionJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAssertion,\n    credential,\n  );\n}\n\nexport async function get(\n  requestJSON: CredentialRequestOptionsJSON,\n): Promise<PublicKeyCredentialWithAssertionJSON> {\n  const credential = (await navigator.credentials.get(\n    getRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return getResponseToJSON(credential);\n}\n\ndeclare global {\n  interface Window {\n    PublicKeyCredential: PublicKeyCredential | undefined;\n  }\n}\n", "// This function does a simple check to test for the credential management API\n// functions we need, and an indication of public key credential authentication\n// support.\n// https://developers.google.com/web/updates/2018/03/webauthn-credential-management\n\nexport function supported(): boolean {\n  // rome-ignore format: Work around https://github.com/rome/tools/issues/3734\n  return !!(\n    // rome-ignore lint(style/useOptionalChain): Optional chaining creates more complicated ES2019 code\n    navigator.credentials &&\n    navigator.credentials.create &&\n    navigator.credentials.get &&\n    window.PublicKeyCredential\n  );\n}\n", "import * as webauthnJSON from \"./index\";\n(globalThis as any).webauthnJSON = webauthnJSON;\n"],
  "mappings": "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",
  "names": ["schema"]
}
